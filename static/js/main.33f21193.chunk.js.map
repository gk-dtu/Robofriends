{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/ErrorBoundary.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundary","props","states","hasError","error","info","this","setState","children","Component","Scroll","style","overflow","border","height","App","onsearchChange","event","target","value","state","fetch","then","response","json","users","length","filteredRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAceA,EAZJ,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,MAAOC,EAAM,EAANA,GAEtB,OACI,yBAAKC,UAAU,+CACX,yBAAKC,IAAG,+BAA0BF,EAA1B,SAAqCG,IAAI,WACjD,6BACI,4BAAKL,GACL,4BAAKC,MCSNK,EAhBA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEd,OACA,6BACIA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OAAO,kBAAC,EAAD,CACNC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCEXW,EAXG,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC5B,OACI,yBAAKX,UAAU,OACf,2BAAOA,UAAU,iCAChBY,KAAM,SACNC,YAAY,gBACZC,SAAUH,MCcJI,E,kDAlBZ,WAAYC,GAAO,IAAD,8BACb,cAAMA,IACDC,OAAO,CACRC,UAAS,GAHA,E,8DAMAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,OAAOC,SACJ,mEAEAG,KAAKL,MAAMO,a,GAfDC,aCKbC,G,MAPF,SAACT,GACV,OACI,yBAAKU,MAAO,CAACC,SAAS,SAAUC,OAAO,kBAAmBC,OAAO,UAC5Db,EAAMO,YC+CJO,E,kDA1CX,aAAc,IAAD,8BACT,gBAaJC,eAAe,SAACC,GACZ,EAAKV,SAAS,CAACZ,YAAYsB,EAAMC,OAAOC,SAbzC,EAAKC,MAAM,CACV/B,OAAQ,GACRM,YAAa,IAJJ,E,gEASO,IAAD,OACd0B,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKlB,SAAS,CAAClB,OAAOoC,S,+BAOnC,IAAD,OACJ,GAA8B,IAA3BnB,KAAKc,MAAM/B,OAAOqC,OACnB,OAAO,uCAET,IAAMC,EAAerB,KAAKc,MAAM/B,OAAOuC,QAAO,SAAAC,GAC1C,OAAOA,EAAM/C,KAAKgD,cAAcC,SAAS,EAAKX,MAAMzB,YAAYmC,kBAGpE,OACA,yBAAK7C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAYW,aAAcU,KAAKU,iBAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAU3B,OAAQsC,W,GAnCnBlB,aCKEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACS,kBAAC,EAAD,MACLC,SAASC,eAAe,SDyH/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACL2C,QAAQ3C,MAAMA,EAAM4C,a","file":"static/js/main.33f21193.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card=({name ,email, id})=>{\r\n   // const{name ,email, id }=props;\r\n    return(\r\n        <div className='tc bg-light-green dib br3 ma2 grow shadow-5'> \r\n            <img src={`https://robohash.org/${id}dfkfj`} alt=\"robots\"></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <h3>{email}</h3>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\nconst CardList=({ robots }) => {\r\n    \r\n    return(\r\n    <div>{\r\n        robots.map((user,i)=>{\r\n        return <Card\r\n         key={i} \r\n         id={robots[i].id} \r\n         name={robots[i].name} \r\n         email={robots[i].email}\r\n         />;\r\n     })\r\n    }\r\n   </div>\r\n     );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) =>{\r\n    return(\r\n        <div className='pa2'>\r\n        <input className='pa2  b--green bg-lightest-blue'\r\n         type ='search' \r\n         placeholder='Search Robots'\r\n         onChange={searchChange}\r\n         ></input>\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React, { Component} from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component{\r\n   constructor(props){\r\n        super(props);\r\n        this.states={\r\n            hasError:false,\r\n        }\r\n   }\r\n   componentDidCatch(error, info){\r\n       this.setState({hasError:true});\r\n   }\r\n   \r\n   render(){\r\n       if(this.states.hasError){\r\n           return <h1>Ooooooops there is something wrong </h1>\r\n       }else{\r\n           return this.props.children;\r\n       }\r\n   }\r\n}\r\nexport default ErrorBoundary;","import React from 'react';\r\nconst Scroll=(props)=>{\r\n    return(\r\n        <div style={{overflow:'scroll', border:'0px solid black', height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll';\r\n\r\nclass App extends Component{\r\n  \r\n    constructor(){\r\n        super()\r\n       this.state={\r\n        robots: [],\r\n        searchfield: '',\r\n       }\r\n      \r\n    }\r\n\r\n    componentDidMount(){\r\n         fetch('https://jsonplaceholder.typicode.com/users')\r\n          .then(response => response.json())\r\n          .then(users => {this.setState({robots:users})});\r\n    }\r\n    onsearchChange=(event)=>{\r\n        this.setState({searchfield:event.target.value})\r\n        \r\n    }\r\n\r\n    render(){\r\n        if(this.state.robots.length===0){\r\n          return <h1>Loading</h1>;\r\n        }else{\r\n        const filteredRobots=this.state.robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n       \r\n        return(\r\n        <div className='tc'>\r\n            <h1 className='f1'>Robofriends</h1>\r\n            <SearchBox  searchChange={this.onsearchChange}/>\r\n            <Scroll>\r\n                <ErrorBoundary>\r\n                   <CardList robots={filteredRobots}/>\r\n                </ErrorBoundary>\r\n            </Scroll>\r\n            \r\n        </div>\r\n    );\r\n    }\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n                  <App/>\n            ,document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}